
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000042e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  000004c4  2**0
                  ALLOC
  3 .stab         000020b8  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003999  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005f15  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <digital_pin_to_timer_PGM>:
  68:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  78:	00 00 00 00                                         ....

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	ee e2       	ldi	r30, 0x2E	; 46
  cc:	f4 e0       	ldi	r31, 0x04	; 4
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a2 30       	cpi	r26, 0x02	; 2
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	11 e0       	ldi	r17, 0x01	; 1
  dc:	a2 e0       	ldi	r26, 0x02	; 2
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	ab 30       	cpi	r26, 0x0B	; 11
  e6:	b1 07       	cpc	r27, r17
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  ee:	0c 94 15 02 	jmp	0x42a	; 0x42a <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <setup>:
int led = 13;

// the setup routine runs once when you press reset:
void setup() {
  // initialize the digital pin as an output.
  pinMode(led, OUTPUT);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	80 91 00 01 	lds	r24, 0x0100
  fc:	0c 94 a6 01 	jmp	0x34c	; 0x34c <pinMode>

00000100 <loop>:
}

// the loop routine runs over and over again forever:
void loop() {
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d1 e0       	ldi	r29, 0x01	; 1
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	88 81       	ld	r24, Y
 10c:	0e 94 de 01 	call	0x3bc	; 0x3bc <digitalWrite>
  delay(1000);               // wait for a second
 110:	68 ee       	ldi	r22, 0xE8	; 232
 112:	73 e0       	ldi	r23, 0x03	; 3
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 1b 01 	call	0x236	; 0x236 <delay>
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	88 81       	ld	r24, Y
 120:	0e 94 de 01 	call	0x3bc	; 0x3bc <digitalWrite>
  delay(1000);               // wait for a second
 124:	68 ee       	ldi	r22, 0xE8	; 232
 126:	73 e0       	ldi	r23, 0x03	; 3
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1000);               // wait for a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  delay(1000);               // wait for a second
 130:	0c 94 1b 01 	jmp	0x236	; 0x236 <delay>

00000134 <main>:
#include <Arduino.h>

int main(void)
{
	init();
 134:	0e 94 41 01 	call	0x282	; 0x282 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 138:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 140:	0e 94 80 00 	call	0x100	; 0x100 <loop>
		if (serialEventRun) serialEventRun();
 144:	20 97       	sbiw	r28, 0x00	; 0
 146:	e1 f3       	breq	.-8      	; 0x140 <main+0xc>
 148:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 14c:	f9 cf       	rjmp	.-14     	; 0x140 <main+0xc>

0000014e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 164:	80 91 02 01 	lds	r24, 0x0102
 168:	90 91 03 01 	lds	r25, 0x0103
 16c:	a0 91 04 01 	lds	r26, 0x0104
 170:	b0 91 05 01 	lds	r27, 0x0105
	unsigned char f = timer0_fract;
 174:	30 91 0a 01 	lds	r19, 0x010A

	m += MILLIS_INC;
	f += FRACT_INC;
 178:	23 2f       	mov	r18, r19
 17a:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 17c:	2d 37       	cpi	r18, 0x7D	; 125
 17e:	20 f4       	brcc	.+8      	; 0x188 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	a1 1d       	adc	r26, r1
 184:	b1 1d       	adc	r27, r1
 186:	05 c0       	rjmp	.+10     	; 0x192 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 188:	23 2f       	mov	r18, r19
 18a:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
 18c:	02 96       	adiw	r24, 0x02	; 2
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 192:	20 93 0a 01 	sts	0x010A, r18
	timer0_millis = m;
 196:	80 93 02 01 	sts	0x0102, r24
 19a:	90 93 03 01 	sts	0x0103, r25
 19e:	a0 93 04 01 	sts	0x0104, r26
 1a2:	b0 93 05 01 	sts	0x0105, r27
	timer0_overflow_count++;
 1a6:	80 91 06 01 	lds	r24, 0x0106
 1aa:	90 91 07 01 	lds	r25, 0x0107
 1ae:	a0 91 08 01 	lds	r26, 0x0108
 1b2:	b0 91 09 01 	lds	r27, 0x0109
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	a1 1d       	adc	r26, r1
 1ba:	b1 1d       	adc	r27, r1
 1bc:	80 93 06 01 	sts	0x0106, r24
 1c0:	90 93 07 01 	sts	0x0107, r25
 1c4:	a0 93 08 01 	sts	0x0108, r26
 1c8:	b0 93 09 01 	sts	0x0109, r27
}
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <micros>:
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 1e6:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 1e8:	f8 94       	cli
	m = timer0_overflow_count;
 1ea:	00 91 06 01 	lds	r16, 0x0106
 1ee:	10 91 07 01 	lds	r17, 0x0107
 1f2:	20 91 08 01 	lds	r18, 0x0108
 1f6:	30 91 09 01 	lds	r19, 0x0109
#if defined(TCNT0)
	t = TCNT0;
 1fa:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 1fc:	a8 9b       	sbis	0x15, 0	; 21
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <micros+0x2a>
 200:	8f 3f       	cpi	r24, 0xFF	; 255
 202:	21 f0       	breq	.+8      	; 0x20c <micros+0x2a>
		m++;
 204:	0f 5f       	subi	r16, 0xFF	; 255
 206:	1f 4f       	sbci	r17, 0xFF	; 255
 208:	2f 4f       	sbci	r18, 0xFF	; 255
 20a:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 20c:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 20e:	32 2f       	mov	r19, r18
 210:	21 2f       	mov	r18, r17
 212:	10 2f       	mov	r17, r16
 214:	00 27       	eor	r16, r16
 216:	08 0f       	add	r16, r24
 218:	11 1d       	adc	r17, r1
 21a:	21 1d       	adc	r18, r1
 21c:	31 1d       	adc	r19, r1
 21e:	42 e0       	ldi	r20, 0x02	; 2
 220:	00 0f       	add	r16, r16
 222:	11 1f       	adc	r17, r17
 224:	22 1f       	adc	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	4a 95       	dec	r20
 22a:	d1 f7       	brne	.-12     	; 0x220 <micros+0x3e>
}
 22c:	b8 01       	movw	r22, r16
 22e:	c9 01       	movw	r24, r18
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <delay>:

void delay(unsigned long ms)
{
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	6b 01       	movw	r12, r22
 244:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
 246:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <micros>
 24a:	eb 01       	movw	r28, r22

	while (ms > 0) {
 24c:	0e c0       	rjmp	.+28     	; 0x26a <delay+0x34>
		if (((uint16_t)micros() - start) >= 1000) {
 24e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <micros>
 252:	6c 1b       	sub	r22, r28
 254:	7d 0b       	sbc	r23, r29
 256:	68 3e       	cpi	r22, 0xE8	; 232
 258:	73 40       	sbci	r23, 0x03	; 3
 25a:	38 f0       	brcs	.+14     	; 0x26a <delay+0x34>
			ms--;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	c8 1a       	sub	r12, r24
 260:	d1 08       	sbc	r13, r1
 262:	e1 08       	sbc	r14, r1
 264:	f1 08       	sbc	r15, r1
			start += 1000;
 266:	c8 51       	subi	r28, 0x18	; 24
 268:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 26a:	c1 14       	cp	r12, r1
 26c:	d1 04       	cpc	r13, r1
 26e:	e1 04       	cpc	r14, r1
 270:	f1 04       	cpc	r15, r1
 272:	69 f7       	brne	.-38     	; 0x24e <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	08 95       	ret

00000282 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 282:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 284:	84 b5       	in	r24, 0x24	; 36
 286:	82 60       	ori	r24, 0x02	; 2
 288:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 28a:	84 b5       	in	r24, 0x24	; 36
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 290:	85 b5       	in	r24, 0x25	; 37
 292:	82 60       	ori	r24, 0x02	; 2
 294:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 296:	85 b5       	in	r24, 0x25	; 37
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 29c:	ee e6       	ldi	r30, 0x6E	; 110
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 2a6:	e1 e8       	ldi	r30, 0x81	; 129
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 2ac:	80 81       	ld	r24, Z
 2ae:	82 60       	ori	r24, 0x02	; 2
 2b0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 2b2:	80 81       	ld	r24, Z
 2b4:	81 60       	ori	r24, 0x01	; 1
 2b6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 2b8:	e0 e8       	ldi	r30, 0x80	; 128
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 2c2:	e1 eb       	ldi	r30, 0xB1	; 177
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	84 60       	ori	r24, 0x04	; 4
 2ca:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 2cc:	e0 eb       	ldi	r30, 0xB0	; 176
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 2d6:	ea e7       	ldi	r30, 0x7A	; 122
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	84 60       	ori	r24, 0x04	; 4
 2de:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 2e0:	80 81       	ld	r24, Z
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 2e6:	80 81       	ld	r24, Z
 2e8:	81 60       	ori	r24, 0x01	; 1
 2ea:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 2ec:	80 81       	ld	r24, Z
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 2f2:	10 92 c1 00 	sts	0x00C1, r1
 2f6:	08 95       	ret

000002f8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 2f8:	83 30       	cpi	r24, 0x03	; 3
 2fa:	69 f0       	breq	.+26     	; 0x316 <turnOffPWM+0x1e>
 2fc:	28 f4       	brcc	.+10     	; 0x308 <turnOffPWM+0x10>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	a1 f0       	breq	.+40     	; 0x32a <turnOffPWM+0x32>
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	11 f5       	brne	.+68     	; 0x34a <turnOffPWM+0x52>
 306:	14 c0       	rjmp	.+40     	; 0x330 <turnOffPWM+0x38>
 308:	86 30       	cpi	r24, 0x06	; 6
 30a:	b1 f0       	breq	.+44     	; 0x338 <turnOffPWM+0x40>
 30c:	87 30       	cpi	r24, 0x07	; 7
 30e:	c1 f0       	breq	.+48     	; 0x340 <turnOffPWM+0x48>
 310:	84 30       	cpi	r24, 0x04	; 4
 312:	d9 f4       	brne	.+54     	; 0x34a <turnOffPWM+0x52>
 314:	04 c0       	rjmp	.+8      	; 0x31e <turnOffPWM+0x26>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 316:	80 91 80 00 	lds	r24, 0x0080
 31a:	8f 77       	andi	r24, 0x7F	; 127
 31c:	03 c0       	rjmp	.+6      	; 0x324 <turnOffPWM+0x2c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 31e:	80 91 80 00 	lds	r24, 0x0080
 322:	8f 7d       	andi	r24, 0xDF	; 223
 324:	80 93 80 00 	sts	0x0080, r24
 328:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 32a:	84 b5       	in	r24, 0x24	; 36
 32c:	8f 77       	andi	r24, 0x7F	; 127
 32e:	02 c0       	rjmp	.+4      	; 0x334 <turnOffPWM+0x3c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 330:	84 b5       	in	r24, 0x24	; 36
 332:	8f 7d       	andi	r24, 0xDF	; 223
 334:	84 bd       	out	0x24, r24	; 36
 336:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 338:	80 91 b0 00 	lds	r24, 0x00B0
 33c:	8f 77       	andi	r24, 0x7F	; 127
 33e:	03 c0       	rjmp	.+6      	; 0x346 <turnOffPWM+0x4e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 340:	80 91 b0 00 	lds	r24, 0x00B0
 344:	8f 7d       	andi	r24, 0xDF	; 223
 346:	80 93 b0 00 	sts	0x00B0, r24
 34a:	08 95       	ret

0000034c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	e4 58       	subi	r30, 0x84	; 132
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
 35a:	fc 01       	movw	r30, r24
 35c:	e0 57       	subi	r30, 0x70	; 112
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 362:	88 23       	and	r24, r24
 364:	41 f1       	breq	.+80     	; 0x3b6 <pinMode+0x6a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	fc 01       	movw	r30, r24
 36e:	e2 55       	subi	r30, 0x52	; 82
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	25 91       	lpm	r18, Z+
 374:	34 91       	lpm	r19, Z+
 376:	d9 01       	movw	r26, r18
	out = portOutputRegister(port);
 378:	8c 55       	subi	r24, 0x5C	; 92
 37a:	9f 4f       	sbci	r25, 0xFF	; 255
 37c:	fc 01       	movw	r30, r24
 37e:	85 91       	lpm	r24, Z+
 380:	94 91       	lpm	r25, Z+
 382:	c8 2f       	mov	r28, r24
 384:	d9 2f       	mov	r29, r25

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
 386:	9f b7       	in	r25, 0x3f	; 63
                cli();
 388:	f8 94       	cli
		*reg &= ~bit;
 38a:	8c 91       	ld	r24, X

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
 38c:	61 11       	cpse	r22, r1
 38e:	06 c0       	rjmp	.+12     	; 0x39c <pinMode+0x50>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
 390:	40 95       	com	r20
 392:	84 23       	and	r24, r20
 394:	8c 93       	st	X, r24
		*out &= ~bit;
 396:	88 81       	ld	r24, Y
 398:	84 23       	and	r24, r20
 39a:	08 c0       	rjmp	.+16     	; 0x3ac <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 39c:	62 30       	cpi	r22, 0x02	; 2
 39e:	41 f4       	brne	.+16     	; 0x3b0 <pinMode+0x64>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
 3a0:	24 2f       	mov	r18, r20
 3a2:	20 95       	com	r18
 3a4:	82 23       	and	r24, r18
 3a6:	8c 93       	st	X, r24
		*out |= bit;
 3a8:	88 81       	ld	r24, Y
 3aa:	84 2b       	or	r24, r20
 3ac:	88 83       	st	Y, r24
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <pinMode+0x68>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
 3b0:	84 2b       	or	r24, r20
 3b2:	8c 93       	st	X, r24
		SREG = oldSREG;
 3b4:	9f bf       	out	0x3f, r25	; 63
	}
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	1f 92       	push	r1
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
 3ca:	28 2f       	mov	r18, r24
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	f9 01       	movw	r30, r18
 3d0:	e8 59       	subi	r30, 0x98	; 152
 3d2:	ff 4f       	sbci	r31, 0xFF	; 255
 3d4:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 3d6:	f9 01       	movw	r30, r18
 3d8:	e4 58       	subi	r30, 0x84	; 132
 3da:	ff 4f       	sbci	r31, 0xFF	; 255
 3dc:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
 3de:	f9 01       	movw	r30, r18
 3e0:	e0 57       	subi	r30, 0x70	; 112
 3e2:	ff 4f       	sbci	r31, 0xFF	; 255
 3e4:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 3e6:	00 23       	and	r16, r16
 3e8:	d1 f0       	breq	.+52     	; 0x41e <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 3ea:	88 23       	and	r24, r24
 3ec:	21 f0       	breq	.+8      	; 0x3f6 <digitalWrite+0x3a>
 3ee:	69 83       	std	Y+1, r22	; 0x01
 3f0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <turnOffPWM>
 3f4:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
 3f6:	e0 2f       	mov	r30, r16
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	ec 55       	subi	r30, 0x5C	; 92
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	85 91       	lpm	r24, Z+
 404:	94 91       	lpm	r25, Z+
 406:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
 408:	9f b7       	in	r25, 0x3f	; 63
	cli();
 40a:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
 40c:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 40e:	61 11       	cpse	r22, r1
 410:	03 c0       	rjmp	.+6      	; 0x418 <digitalWrite+0x5c>
		*out &= ~bit;
 412:	10 95       	com	r17
 414:	81 23       	and	r24, r17
 416:	01 c0       	rjmp	.+2      	; 0x41a <digitalWrite+0x5e>
	} else {
		*out |= bit;
 418:	81 2b       	or	r24, r17
 41a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
 41c:	9f bf       	out	0x3f, r25	; 63
}
 41e:	0f 90       	pop	r0
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	08 95       	ret

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
